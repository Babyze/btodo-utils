{"version":3,"sources":["../lib/timestamp/timestamp.ts","../lib/database/database.module.ts","../lib/database/base.repository.ts"],"sourcesContent":["interface ITimestamp {\r\n  second: number;\r\n}\r\n\r\nexport class Timestamp implements ITimestamp {\r\n  second: number;\r\n\r\n  constructor(date: number | Date) {\r\n    if (date instanceof Date) {\r\n      this.second = Math.floor(date.getTime() / 1000);\r\n    } else {\r\n      this.second = date;\r\n    }\r\n  }\r\n\r\n  getSecond(): number {\r\n    return this.second;\r\n  }\r\n\r\n  toDate(): Date {\r\n    return new Date(this.second * 1000);\r\n  }\r\n}\r\n\r\nexport class Timestamp2 {}\r\n","import { Module } from \"@nestjs/common\";\r\nimport { TypeOrmModule } from \"@nestjs/typeorm\";\r\nimport { EntityClassOrSchema } from \"@nestjs/typeorm/dist/interfaces/entity-class-or-schema.type\";\r\n\r\n@Module({})\r\nexport class DatabaseModule {\r\n  static forFeature(models: EntityClassOrSchema[]) {\r\n    return TypeOrmModule.forFeature(models);\r\n  }\r\n}\r\n","import {\r\n  FindOneOptions,\r\n  FindManyOptions,\r\n  Repository,\r\n  DeepPartial,\r\n} from \"typeorm\";\r\nimport { DatabaseInterfaceRepository } from \"./database.interface\";\r\n\r\nexport abstract class BaseAbstractRepository<T>\r\n  extends Repository<T>\r\n  implements DatabaseInterfaceRepository<T>\r\n{\r\n  constructor(private readonly repo: Repository<T>) {\r\n    super(repo.target, repo.manager);\r\n  }\r\n\r\n  createAndSave(data: DeepPartial<T>): Promise<T> {\r\n    const object = this.repo.create(data);\r\n    return this.repo.save(object);\r\n  }\r\n\r\n  createManyAndSave(data: DeepPartial<T>[]): Promise<T[]> {\r\n    const object = this.repo.create(data);\r\n    return this.repo.save(object);\r\n  }\r\n\r\n  findOneByCondition(filterCondition: FindOneOptions<T>): Promise<T> {\r\n    return this.repo.findOne(filterCondition);\r\n  }\r\n\r\n  findAll(options?: FindManyOptions<T>): Promise<T[]> {\r\n    return this.repo.find(options);\r\n  }\r\n\r\n  findWithRelations(relations: FindManyOptions<T>): Promise<T[]> {\r\n    return this.repo.find(relations);\r\n  }\r\n\r\n  findOne(options: FindOneOptions<T>): Promise<T> {\r\n    return this.repo.findOne(options);\r\n  }\r\n}\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIO,IAAM,YAAN,MAAsC;AAAA,EAG3C,YAAY,MAAqB;AAC/B,QAAI,gBAAgB,MAAM;AACxB,WAAK,SAAS,KAAK,MAAM,KAAK,QAAQ,IAAI,GAAI;AAAA,IAChD,OAAO;AACL,WAAK,SAAS;AAAA,IAChB;AAAA,EACF;AAAA,EAEA,YAAoB;AAClB,WAAO,KAAK;AAAA,EACd;AAAA,EAEA,SAAe;AACb,WAAO,IAAI,KAAK,KAAK,SAAS,GAAI;AAAA,EACpC;AACF;AAEO,IAAM,aAAN,MAAiB;AAAC;;;ACxBzB,SAAS,cAAc;AACvB,SAAS,qBAAqB;AAD9B;AAIA,8BAAC,OAAO,CAAC,CAAC;AACH,IAAM,iBAAN,MAAqB;AAAA,EAC1B,OAAO,WAAW,QAA+B;AAC/C,WAAO,cAAc,WAAW,MAAM;AAAA,EACxC;AACF;AAJO;AAAM,iBAAN,8CADP,4BACa;AAAN,4BAAM;;;ACLb;AAAA,EAGE;AAAA,OAEK;AAGA,IAAe,yBAAf,cACG,WAEV;AAAA,EACE,YAA6B,MAAqB;AAChD,UAAM,KAAK,QAAQ,KAAK,OAAO;AADJ;AAAA,EAE7B;AAAA,EAEA,cAAc,MAAkC;AAC9C,UAAM,SAAS,KAAK,KAAK,OAAO,IAAI;AACpC,WAAO,KAAK,KAAK,KAAK,MAAM;AAAA,EAC9B;AAAA,EAEA,kBAAkB,MAAsC;AACtD,UAAM,SAAS,KAAK,KAAK,OAAO,IAAI;AACpC,WAAO,KAAK,KAAK,KAAK,MAAM;AAAA,EAC9B;AAAA,EAEA,mBAAmB,iBAAgD;AACjE,WAAO,KAAK,KAAK,QAAQ,eAAe;AAAA,EAC1C;AAAA,EAEA,QAAQ,SAA4C;AAClD,WAAO,KAAK,KAAK,KAAK,OAAO;AAAA,EAC/B;AAAA,EAEA,kBAAkB,WAA6C;AAC7D,WAAO,KAAK,KAAK,KAAK,SAAS;AAAA,EACjC;AAAA,EAEA,QAAQ,SAAwC;AAC9C,WAAO,KAAK,KAAK,QAAQ,OAAO;AAAA,EAClC;AACF;","names":[]}